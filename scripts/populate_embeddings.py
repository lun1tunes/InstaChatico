#!/usr/bin/env python3
"""Populate database with sample products and embeddings for testing"""

import asyncio
import sys
from pathlib import Path

# Add src to path for imports
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))

from sqlalchemy.ext.asyncio import create_async_engine, async_sessionmaker
from core.config import settings
from core.services.embedding_service import EmbeddingService


# Sample products/services (customize these for your business)
SAMPLE_PRODUCTS = [
    {
        "title": "–ö–≤–∞—Ä—Ç–∏—Ä–∞ –≤ —Ü–µ–Ω—Ç—Ä–µ –≥–æ—Ä–æ–¥–∞",
        "description": "–ü—Ä–æ—Å—Ç–æ—Ä–Ω–∞—è –¥–≤—É—Ö–∫–æ–º–Ω–∞—Ç–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞ –≤ —Ü–µ–Ω—Ç—Ä–µ –≥–æ—Ä–æ–¥–∞, 65 –∫–≤.–º., —Å —Ä–µ–º–æ–Ω—Ç–æ–º –∏ –º–µ–±–µ–ª—å—é. –†—è–¥–æ–º –º–µ—Ç—Ä–æ, –ø–∞—Ä–∫–æ–≤–∫–∞, —Ä–∞–∑–≤–∏—Ç–∞—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞.",
        "category": "–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å",
        "price": "5 000 000 —Ä—É–±.",
        "tags": "–∫–≤–∞—Ä—Ç–∏—Ä–∞, –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å, —Ü–µ–Ω—Ç—Ä, –¥–≤—É—Ö–∫–æ–º–Ω–∞—Ç–Ω–∞—è",
        "url": "https://example.com/apartments/center-1",
        "image_url": "https://example.com/images/apt1.jpg"
    },
    {
        "title": "–ê–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã —É –º–æ—Ä—è",
        "description": "–ù–æ–≤—ã–µ –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã –Ω–∞ –±–µ—Ä–µ–≥—É –º–æ—Ä—è, 50 –∫–≤.–º., –ø–∞–Ω–æ—Ä–∞–º–Ω—ã–µ –æ–∫–Ω–∞ —Å –≤–∏–¥–æ–º –Ω–∞ –º–æ—Ä–µ. –ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –æ—Ç–¥—ã—Ö–∞ –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π.",
        "category": "–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å",
        "price": "8 000 000 —Ä—É–±.",
        "tags": "–∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã, –º–æ—Ä–µ, –ø–∞–Ω–æ—Ä–∞–º–Ω—ã–µ –æ–∫–Ω–∞, –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏",
        "url": "https://example.com/apartments/seaside-1",
        "image_url": "https://example.com/images/apt2.jpg"
    },
    {
        "title": "–ö–æ—Ç—Ç–µ–¥–∂ –≤ –ø—Ä–∏–≥–æ—Ä–æ–¥–µ",
        "description": "–£—é—Ç–Ω—ã–π –∫–æ—Ç—Ç–µ–¥–∂ –Ω–∞ —É—á–∞—Å—Ç–∫–µ 10 —Å–æ—Ç–æ–∫, 120 –∫–≤.–º., 3 —Å–ø–∞–ª—å–Ω–∏, –±–∞–Ω—è, –≥–∞—Ä–∞–∂. –¢–∏—Ö–æ–µ –º–µ—Å—Ç–æ –¥–ª—è —Å–µ–º–µ–π–Ω–æ–≥–æ –æ—Ç–¥—ã—Ö–∞.",
        "category": "–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å",
        "price": "12 000 000 —Ä—É–±.",
        "tags": "–∫–æ—Ç—Ç–µ–¥–∂, –¥–æ–º, –ø—Ä–∏–≥–æ—Ä–æ–¥, —É—á–∞—Å—Ç–æ–∫, –±–∞–Ω—è",
        "url": "https://example.com/houses/cottage-1",
        "image_url": "https://example.com/images/cottage1.jpg"
    },
    {
        "title": "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏",
        "description": "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –ø–æ–¥–±–æ—Ä—É –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏. –ü–æ–º–æ–∂–µ–º –≤—ã–±—Ä–∞—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É, –¥–æ–º –∏–ª–∏ –∫–æ–º–º–µ—Ä—á–µ—Å–∫—É—é –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –ø–æ–¥ –≤–∞—à–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è.",
        "category": "–£—Å–ª—É–≥–∏",
        "price": "–ë–µ—Å–ø–ª–∞—Ç–Ω–æ",
        "tags": "–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è, —É—Å–ª—É–≥–∏, –ø–æ–º–æ—â—å, –ø–æ–¥–±–æ—Ä",
        "url": "https://example.com/services/consultation",
        "image_url": "https://example.com/images/consultation.jpg"
    },
    {
        "title": "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏",
        "description": "–ü–æ–ª–Ω–æ–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ —Å–¥–µ–ª–æ–∫ —Å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å—é. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Å–¥–µ–ª–∫–∏.",
        "category": "–£—Å–ª—É–≥–∏",
        "price": "50 000 —Ä—É–±.",
        "tags": "—é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ —É—Å–ª—É–≥–∏, —Å–¥–µ–ª–∫–∞, –¥–æ–∫—É–º–µ–Ω—Ç—ã, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å",
        "url": "https://example.com/services/legal",
        "image_url": "https://example.com/images/legal.jpg"
    },
    {
        "title": "–°—Ç—É–¥–∏—è –≤ –Ω–æ–≤–æ—Å—Ç—Ä–æ–π–∫–µ",
        "description": "–°—Ç—É–¥–∏—è 28 –∫–≤.–º. –≤ –Ω–æ–≤–æ–º –∂–∏–ª–æ–º –∫–æ–º–ø–ª–µ–∫—Å–µ. –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∫–∞, –≤—ã—Å–æ–∫–∏–µ –ø–æ—Ç–æ–ª–∫–∏, —Å–¥–∞—á–∞ –¥–æ–º–∞ –≤ 2025 –≥–æ–¥—É.",
        "category": "–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å",
        "price": "3 500 000 —Ä—É–±.",
        "tags": "—Å—Ç—É–¥–∏—è, –Ω–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∞, —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è, –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏",
        "url": "https://example.com/apartments/studio-1",
        "image_url": "https://example.com/images/studio1.jpg"
    },
    {
        "title": "–ü–µ–Ω—Ç—Ö–∞—É—Å —Å —Ç–µ—Ä—Ä–∞—Å–æ–π",
        "description": "–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –ø–µ–Ω—Ç—Ö–∞—É—Å 200 –∫–≤.–º. —Å —Ç–µ—Ä—Ä–∞—Å–æ–π 80 –∫–≤.–º. –ü—Ä–µ–º–∏—É–º-–∫–ª–∞—Å—Å, –ø–∞–Ω–æ—Ä–∞–º–Ω—ã–π –≤–∏–¥ –Ω–∞ –≥–æ—Ä–æ–¥, –¥–∏–∑–∞–π–Ω–µ—Ä—Å–∫–∏–π —Ä–µ–º–æ–Ω—Ç.",
        "category": "–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å",
        "price": "35 000 000 —Ä—É–±.",
        "tags": "–ø–µ–Ω—Ç—Ö–∞—É—Å, —Ç–µ—Ä—Ä–∞—Å–∞, –ø—Ä–µ–º–∏—É–º, —ç–∫—Å–∫–ª—é–∑–∏–≤, –ø–∞–Ω–æ—Ä–∞–º–∞",
        "url": "https://example.com/apartments/penthouse-1",
        "image_url": "https://example.com/images/penthouse1.jpg"
    },
    {
        "title": "–ò–ø–æ—Ç–µ—á–Ω–æ–µ –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
        "description": "–ü–æ–º–æ—â—å –≤ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∏–ø–æ—Ç–µ–∫–∏. –ü–æ–¥–±–æ—Ä –ª—É—á—à–∏—Ö —É—Å–ª–æ–≤–∏–π, —Ä–∞–±–æ—Ç–∞ —Å –±–∞–Ω–∫–∞–º–∏, –æ–¥–æ–±—Ä–µ–Ω–∏–µ –∑–∞ 1 –¥–µ–Ω—å. –ë–æ–ª–µ–µ 20 –±–∞–Ω–∫–æ–≤-–ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤.",
        "category": "–£—Å–ª—É–≥–∏",
        "price": "–û—Ç 10 000 —Ä—É–±.",
        "tags": "–∏–ø–æ—Ç–µ–∫–∞, –∫—Ä–µ–¥–∏—Ç, –±–∞–Ω–∫–∏, —Ñ–∏–Ω–∞–Ω—Å—ã",
        "url": "https://example.com/services/mortgage",
        "image_url": "https://example.com/images/mortgage.jpg"
    },
]


async def populate_embeddings():
    """Add sample products with auto-generated embeddings to database"""
    print("üöÄ Starting database population...")

    # Create database connection
    engine = create_async_engine(settings.db.url, echo=False)
    session_factory = async_sessionmaker(bind=engine, autoflush=False, autocommit=False)

    async with session_factory() as session:
        try:
            # Initialize embedding service
            embedding_service = EmbeddingService()

            print(f"\nüì¶ Adding {len(SAMPLE_PRODUCTS)} products...\n")

            for idx, product_data in enumerate(SAMPLE_PRODUCTS, 1):
                try:
                    print(f"[{idx}/{len(SAMPLE_PRODUCTS)}] Adding: {product_data['title']}")

                    # Add product to database (will automatically generate embedding)
                    product = await embedding_service.add_product(
                        title=product_data["title"],
                        description=product_data["description"],
                        session=session,
                        category=product_data.get("category"),
                        price=product_data.get("price"),
                        tags=product_data.get("tags"),
                        url=product_data.get("url"),
                        image_url=product_data.get("image_url"),
                        is_active=True
                    )

                    print(f"    ‚úÖ Added successfully (ID: {product.id})")

                except Exception as e:
                    print(f"    ‚ùå Failed to add: {e}")

            print("\n‚ú® Database population completed!")
            print("\nüìä Testing search functionality...\n")

            # Test search
            test_queries = [
                "–∫–≤–∞—Ä—Ç–∏—Ä—ã –≤ —Ü–µ–Ω—Ç—Ä–µ",
                "–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è",
                "–ø—Ä–µ–º–∏—É–º –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å"
            ]

            for query in test_queries:
                print(f"üîç Searching for: '{query}'")
                results = await embedding_service.search_similar_products(
                    query=query,
                    session=session,
                    limit=3
                )

                if results:
                    for result in results:
                        print(f"    - {result['title']} (similarity: {result['similarity']:.4f})")
                else:
                    print("    No results found")
                print()

        except Exception as e:
            print(f"\n‚ùå Error: {e}")
            raise
        finally:
            await engine.dispose()

    print("‚úÖ All done!")


if __name__ == "__main__":
    asyncio.run(populate_embeddings())
