services:
  postgres:
    image: postgres:15-alpine
    container_name: instagram_postgres
    environment:
      POSTGRES_DB: instagram_db
      POSTGRES_USER: instagram_user
      POSTGRES_PASSWORD: instagram_password
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - instagram_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  redis:
    image: redis:7-alpine
    container_name: instagram_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - instagram_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  api:
    build: .
    container_name: instagram_api
    ports:
      - "127.0.0.1:${PORT:-4291}:${PORT:-4291}"
    environment:
      - PORT=${PORT:-4291}
      - DATABASE_URL=${DATABASE_URL}
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - TOKEN=${TOKEN}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - instagram_network
    command: sh -c "alembic upgrade head && uvicorn main:app --host 0.0.0.0 --port $PORT --reload"

  celery_worker:
    build: .
    container_name: instagram_celery_worker
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - instagram_network
    command: celery -A core.celery_app worker --loglevel=info --concurrency=4 -Q llm_queue

  celery_beat:
    build: .
    container_name: instagram_celery_beat
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - instagram_network
    command: celery -A core.celery_app beat --loglevel=info

  # dozzle:
  #   image: amir20/dozzle:latest
  #   container_name: instagram_dozzle
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #   networks:
  #     - traefik_network
  #   environment:
  #     - DOZZLE_NO_ANALYTICS=true
  #     - DOZZLE_USERNAME=${DOZZLE_USERNAME}
  #     - DOZZLE_PASSWORD=${DOZZLE_PASSWORD}
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.dozzle.rule=Host(`logs.yourdomain.com`)"
  #     - "traefik.http.routers.dozzle.entrypoints=web"
  #     - "traefik.http.services.dozzle.loadbalancer.server.port=8080"
  #     - "traefik.docker.network=traefik_network"

  # traefik:
  #   image: traefik:v2.10
  #   container_name: traefik
  #   ports:
  #     - "127.0.0.1:8080:8080"
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #   command:
  #     - "--providers.docker=true"
  #     - "--providers.docker.exposedbydefault=false"
  #     - "--entrypoints.web.address=:8080"
  #   networks:
  #     - traefik_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  instagram_network:
    driver: bridge  
  # traefik_network:
  #   driver: bridge