services:
  postgres:
    image: postgres:15-alpine
    container_name: instagram_postgres
    environment:
      POSTGRES_DB: instagram_db
      POSTGRES_USER: lun1z
      POSTGRES_PASSWORD: 3b3e3tzp8e
      POSTGRES_HOST_AUTH_METHOD: trust
      POSTGRES_INITDB_ARGS: "--auth-host=trust --auth-local=trust"
    ports:
      - "59731:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - instagram_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U lun1z -d instagram_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  redis:
    image: redis:7-alpine
    container_name: instagram_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - instagram_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  api:
    build: .
    container_name: instagram_api
    ports:
      - "127.0.0.1:${PORT:-4291}:${PORT:-4291}"
    volumes:
      - ./:/app
      - conversations_data:/app/conversations
    environment:
      - PORT=${PORT:-4291}
      - DATABASE_URL=${DATABASE_URL}
      - CELERY_BROKER_URL=redis://redis:6379/0
      - DEVELOPMENT_MODE=true
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - TOKEN=${TOKEN}
      - INSTA_TOKEN=${INSTA_TOKEN}
      - INSTAGRAM_API_VERSION=${INSTAGRAM_API_VERSION:-v23.0}
      - APP_SECRET=${APP_SECRET:-default_app_secret}
      - DOCS_USERNAME=${DOCS_USERNAME}
      - DOCS_PASSWORD=${DOCS_PASSWORD}
      - TG_TOKEN=${TG_TOKEN}
      - TG_CHAT_ID=${TG_CHAT_ID}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - instagram_network
    command: sh -c "alembic upgrade head && uvicorn main:app --host 0.0.0.0 --port $PORT --reload"
    security_opt:
      - no-new-privileges:true

  celery_worker:
    build: .
    container_name: instagram_celery_worker
    volumes:
      - ./:/app
      - conversations_data:/app/conversations
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - INSTA_TOKEN=${INSTA_TOKEN}
      - INSTAGRAM_API_VERSION=${INSTAGRAM_API_VERSION:-v23.0}
      - APP_SECRET=${APP_SECRET:-default_app_secret}
      - TG_TOKEN=${TG_TOKEN}
      - TG_CHAT_ID=${TG_CHAT_ID}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - instagram_network
    command: sh -c "python -c 'import celery_worker' && celery -A celery_worker worker --loglevel=info --concurrency=4 -Q llm_queue,instagram_queue"
    security_opt:
      - no-new-privileges:true

  celery_beat:
    build: .
    container_name: instagram_celery_beat
    volumes:
      - ./:/app
      - conversations_data:/app/conversations
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - INSTA_TOKEN=${INSTA_TOKEN}
      - INSTAGRAM_API_VERSION=${INSTAGRAM_API_VERSION:-v23.0}
      - APP_SECRET=${APP_SECRET:-default_app_secret}
      - TG_TOKEN=${TG_TOKEN}
      - TG_CHAT_ID=${TG_CHAT_ID}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - instagram_network
    command: celery -A celery_worker beat --loglevel=info
    security_opt:
      - no-new-privileges:true

  dozzle:
    image: amir20/dozzle:latest
    container_name: instagram_dozzle
    ports:
      - "57928:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./dozzle-users.yml:/data/users.yml:ro
    networks:
      - instagram_network
    environment:
      - DOZZLE_NO_ANALYTICS=true
      - DOZZLE_AUTH_PROVIDER=simple
    restart: unless-stopped

  # traefik:
  #   image: traefik:v2.10
  #   container_name: traefik
  #   ports:
  #     - "127.0.0.1:8080:8080"
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #   command:
  #     - "--providers.docker=true"
  #     - "--providers.docker.exposedbydefault=false"
  #     - "--entrypoints.web.address=:8080"
  #   networks:
  #     - traefik_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  conversations_data:
    driver: local

networks:
  instagram_network:
    driver: bridge  
  # traefik_network:
  #   driver: bridge