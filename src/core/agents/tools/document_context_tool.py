"""
Business documents context tool for answer agent.
Provides access to client business information (hours, location, promotions, policies).
IMPORTANT: This tool does NOT provide prices - prices come from embedding_search only.
"""

import logging
from agents import function_tool

from ...services.document_context_service import document_context_service
from ...models.db_helper import db_helper

logger = logging.getLogger(__name__)


async def _document_context_implementation() -> str:
    """
    –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–∏–∑–Ω–µ—Å-–¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞–º.

    –≠—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–ø–∞–Ω–∏–∏ (PDF, Excel –∏ —Ç.–¥.),
    –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã—Ö –≤ —Ñ–æ—Ä–º–∞—Ç Markdown –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ AI-–∞–≥–µ–Ω—Ç–æ–º.

    ‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –≠—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ù–ï –°–û–î–ï–†–ñ–ò–¢ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ü–µ–Ω–∞—Ö!
    –¶–µ–Ω—ã –í–°–ï–ì–î–ê –±–µ—Ä—É—Ç—Å—è –¢–û–õ–¨–ö–û –∏–∑ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ embedding_search (–≤–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫).

    –ò–°–ü–û–õ–¨–ó–£–ô –≠–¢–û–¢ –ò–ù–°–¢–†–£–ú–ï–ù–¢ –î–õ–Ø:
    - –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –∏ –≥—Ä–∞—Ñ–∏–∫ –∫–æ–º–ø–∞–Ω–∏–∏
    - –ê–¥—Ä–µ—Å –∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
    - –¢–µ–∫—É—â–∏–µ –∞–∫—Ü–∏–∏ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    - –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏ (–¥–æ—Å—Ç–∞–≤–∫–∞, –≤–æ–∑–≤—Ä–∞—Ç, –≥–∞—Ä–∞–Ω—Ç–∏—è)
    - –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    - –û–±—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥ –∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (–ë–ï–ó –¶–ï–ù)

    –ù–ï –ò–°–ü–û–õ–¨–ó–£–ô –¥–ª—è:
    - –í–æ–ø—Ä–æ—Å–æ–≤ –æ —Ü–µ–Ω–∞—Ö (–∏—Å–ø–æ–ª—å–∑—É–π embedding_search)
    - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –±—ã—Å—Ç—Ä–æ —É—Å—Ç–∞—Ä–µ—Ç—å

    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Markdown-–∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –±–∏–∑–Ω–µ—Å-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤,
        –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —á—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.

    Examples:
        –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
        - –ö–ª–∏–µ–Ω—Ç: "–ö–∞–∫–æ–π —É –≤–∞—Å –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã?" ‚Üí –í—ã–∑–æ–≤–∏ document_context() –∏ –Ω–∞–π–¥–∏ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
        - –ö–ª–∏–µ–Ω—Ç: "–ì–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å?" ‚Üí –í—ã–∑–æ–≤–∏ document_context() –∏ –Ω–∞–π–¥–∏ –∞–¥—Ä–µ—Å
        - –ö–ª–∏–µ–Ω—Ç: "–ö–∞–∫–∏–µ —Å–µ–π—á–∞—Å –∞–∫—Ü–∏–∏?" ‚Üí –í—ã–∑–æ–≤–∏ document_context() –∏ –Ω–∞–π–¥–∏ –∞–∫—Ü–∏–∏

        –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
        - –ö–ª–∏–µ–Ω—Ç: "–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç —É—Å–ª—É–≥–∞?" ‚Üí ‚ùå –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π document_context, –∏—Å–ø–æ–ª—å–∑—É–π embedding_search
    """
    try:
        logger.info("Document context tool called")

        # Create a new database session within the current event loop context
        # This prevents the "attached to a different loop" error
        from core.utils.task_helpers import get_db_session

        async with get_db_session() as session:
            # Get formatted context from service
            context = await document_context_service.get_client_context(session=session)

            if not context or context.strip() == "# Business Information" or context.strip() == "":
                logger.warning("No business documents available")
                return (
                    f"‚ö†Ô∏è NO BUSINESS DOCUMENTS AVAILABLE\n\n"
                    f"No business documents have been uploaded.\n"
                    f"Please inform the customer that specific business information "
                    f"(hours, location, policies) should be requested via direct contact.\n\n"
                    f"üí° Suggestion: Provide contact information (phone, email, DM) for detailed inquiries."
                )

            # Return the formatted markdown context
            formatted_output = f"‚úÖ Business Documents Context:\n\n{context}\n\n"
            formatted_output += (
                f"üí° Usage: Use this information to answer questions about business hours, "
                f"location, promotions, and policies. DO NOT use prices from these documents - "
                f"always use embedding_search for price information."
            )

            logger.info(f"Document context retrieved | context_length={len(context)}")
            return formatted_output

    except Exception as e:
        error_msg = f"‚ùå Error retrieving business documents: {str(e)}"
        logger.error(f"Document context retrieval failed | error={str(e)}", exc_info=True)
        return error_msg


# Create the tool using @function_tool decorator
# This makes it available to OpenAI Agents SDK
document_context = function_tool(_document_context_implementation)
