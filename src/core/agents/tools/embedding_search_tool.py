"""
Semantic search tool for products/services using vector embeddings.
Automatically filters out-of-distribution results below 70% similarity threshold.
"""

import logging
from typing import Optional
from agents import function_tool

from ...services.embedding_service import EmbeddingService
from ...models.db_helper import db_helper

logger = logging.getLogger(__name__)


async def _embedding_search_implementation(query: str, limit: int = 5, category: Optional[str] = None) -> str:
    """
    –ü–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ —É—Å–ª—É–≥ –ø–æ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–º—É —Å—Ö–æ–¥—Å—Ç–≤—É —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.

    –≠—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —è–∑—ã–∫–µ –≤ –≤–µ–∫—Ç–æ—Ä–Ω—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç
    –ø–æ–∏—Å–∫ –ø–æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–æ—Å–∏–Ω—É—Å–Ω–æ–≥–æ —Å—Ö–æ–¥—Å—Ç–≤–∞. –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò –§–ò–õ–¨–¢–†–£–ï–¢ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    —Å —É—Ä–æ–≤–Ω–µ–º —Å—Ö–æ–¥—Å—Ç–≤–∞ –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞ (out-of-distribution detection), —á—Ç–æ–±—ã –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã.

    ‚ö†Ô∏è –í–ê–ñ–ù–û: –û–ë–û–ì–ê–©–ê–ô –ó–ê–ü–†–û–° –ú–ï–î–ò–ê-–ö–û–ù–¢–ï–ö–°–¢–û–ú!
    - –ü–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º –í–°–ï–ì–î–ê –ø—Ä–æ–≤–µ—Ä—è–π –º–µ–¥–∏–∞-–∫–æ–Ω—Ç–µ–∫—Å—Ç (–ø–æ–¥–ø–∏—Å—å –ø–æ—Å—Ç–∞, –æ–ø–∏—Å–∞–Ω–∏–µ)
    - –ï—Å–ª–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç ‚Üí –∏—Å–ø–æ–ª—å–∑—É–π –µ–≥–æ –ü–û–õ–ù–û–ï –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ query
    - –ü—Ä–∏–º–µ—Ä: –ö–ª–∏–µ–Ω—Ç: "–¶–µ–Ω–∞ —Å–∫—Ä–∞–±–∞?", –ö–æ–Ω—Ç–µ–∫—Å—Ç: "–ö–æ—Ñ–µ–π–Ω—ã–π —Å–∫—Ä–∞–± –∞–Ω—Ç–∏—Ü–µ–ª–ª—é–ª–∏—Ç–Ω—ã–π"
      ‚Üí query –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å "–∫–æ—Ñ–µ–π–Ω—ã–π —Å–∫—Ä–∞–± –∞–Ω—Ç–∏—Ü–µ–ª–ª—é–ª–∏—Ç–Ω—ã–π", –ù–ï –ø—Ä–æ—Å—Ç–æ "—Å–∫—Ä–∞–±"

    –ò–°–ü–û–õ–¨–ó–£–ô –≠–¢–û–¢ –ò–ù–°–¢–†–£–ú–ï–ù–¢ –ö–û–ì–î–ê:
    - –ö–ª–∏–µ–Ω—Ç —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∞—Ö –∏–ª–∏ —É—Å–ª—É–≥–∞—Ö ("–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –∫–≤–∞—Ä—Ç–∏—Ä—ã?")
    - –ö–ª–∏–µ–Ω—Ç —Ö–æ—á–µ—Ç —É–∑–Ω–∞—Ç—å —Ü–µ–Ω—ã –∏–ª–∏ –Ω–∞–ª–∏—á–∏–µ ("–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è?")
    - –ö–ª–∏–µ–Ω—Ç –∏—â–µ—Ç –ø–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º ("–∫–≤–∞—Ä—Ç–∏—Ä—ã –≤ —Ü–µ–Ω—Ç—Ä–µ", "–ø—Ä–µ–º–∏—É–º —É—Å–ª—É–≥–∏")

    –ù–ï –ò–°–ü–û–õ–¨–ó–£–ô –¥–ª—è:
    - –û–±—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –æ —Ä–µ–∂–∏–º–µ —Ä–∞–±–æ—Ç—ã, –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–ª–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏
    - –í–æ–ø—Ä–æ—Å–æ–≤, –Ω–µ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏/—É—Å–ª—É–≥–∞–º–∏

    –í–ê–ñ–ù–û: –ï—Å–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –≤–µ—Ä–Ω—É–ª "NO RELEVANT PRODUCTS FOUND", —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–π
    –ø—Ä–æ–¥—É–∫—Ç/—É—Å–ª—É–≥–∞ –ù–ï –ü–†–ï–î–°–¢–ê–í–õ–ï–ù–´ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ. –í–µ–∂–ª–∏–≤–æ —Å–æ–æ–±—â–∏ –∫–ª–∏–µ–Ω—Ç—É, —á—Ç–æ —ç—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.

    Args:
        query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —è–∑—ã–∫–µ –Ω–∞ –ª—é–±–æ–º —è–∑—ã–∫–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–∫–≤–∞—Ä—Ç–∏—Ä—ã –≤ —Ü–µ–Ω—Ç—Ä–µ",
               "apartments", "–ø—Ä–µ–º–∏—É–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è"). –ë—É–¥—å –∫–æ–Ω–∫—Ä–µ—Ç–µ–Ω –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.
        limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã—Å–æ–∫–æ—É–≤–µ—Ä–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 5, –º–∞–∫—Å–∏–º—É–º 10.
               –í–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å —É—Ä–æ–≤–Ω–µ–º —Å—Ö–æ–¥—Å—Ç–≤–∞ –≤—ã—à–µ –ø–æ—Ä–æ–≥–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏.
        category: –ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–ª—å–∫–æ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å",
                 "–£—Å–ª—É–≥–∏"). –ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç–æ –¥–ª—è —Å—É–∂–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞, –∫–æ–≥–¥–∞ –∑–Ω–∞–µ—à—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é.

    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –æ–¥–Ω–∏–º –∏–∑ —Ç—Ä–µ—Ö –∏—Å—Ö–æ–¥–æ–≤:
        1. HIGH-CONFIDENCE RESULTS: –°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏, –æ–ø–∏—Å–∞–Ω–∏—è–º–∏, —Ü–µ–Ω–∞–º–∏
           –∏ —É—Ä–æ–≤–Ω–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏. –¢—ã –º–æ–∂–µ—à—å –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.
        2. NO RELEVANT PRODUCTS FOUND: –í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ (out-of-distribution).
           –ó–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç/—É—Å–ª—É–≥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –í–µ–∂–ª–∏–≤–æ —Å–æ–æ–±—â–∏ –æ–± —ç—Ç–æ–º –∫–ª–∏–µ–Ω—Ç—É.
        3. DATABASE EMPTY: –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤. –ü—Ä–µ–¥–ª–æ–∂–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏.

    Examples:
        –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
        - query: "–∫–≤–∞—Ä—Ç–∏—Ä—ã –≤ —Ü–µ–Ω—Ç—Ä–µ" ‚Üí –í–µ—Ä–Ω–µ—Ç –∫–≤–∞—Ä—Ç–∏—Ä—ã —Å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        - query: "–∫–æ—Ñ–µ–π–Ω—ã–π —Å–∫—Ä–∞–± –∞–Ω—Ç–∏—Ü–µ–ª–ª—é–ª–∏—Ç–Ω—ã–π" ‚Üí –í–µ—Ä–Ω–µ—Ç —Ç–æ—á–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç
        - query: "–Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å", category: "–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å" ‚Üí –¢–æ–ª—å–∫–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å

        –° –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–µ–¥–∏–∞-–∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:
        - –ö–æ–Ω—Ç–µ–∫—Å—Ç: "–ö–æ—Ñ–µ–π–Ω—ã–π —Å–∫—Ä–∞–±", –ö–ª–∏–µ–Ω—Ç: "–¶–µ–Ω–∞?" ‚Üí query: "–∫–æ—Ñ–µ–π–Ω—ã–π —Å–∫—Ä–∞–±" ‚úÖ
        - –ö–æ–Ω—Ç–µ–∫—Å—Ç: "–°—ã–≤–æ—Ä–æ—Ç–∫–∞ —Å –≤–∏—Ç–∞–º–∏–Ω–æ–º –°", –ö–ª–∏–µ–Ω—Ç: "–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç?" ‚Üí query: "—Å—ã–≤–æ—Ä–æ—Ç–∫–∞ –≤–∏—Ç–∞–º–∏–Ω C" ‚úÖ

        –ü—Ä–∏–º–µ—Ä—ã OOD (–Ω–µ –Ω–∞–π–¥–µ–Ω–æ):
        - query: "–ø–∏—Ü—Ü–∞" ‚Üí –í–µ—Ä–Ω–µ—Ç NO RELEVANT PRODUCTS FOUND (–º—ã –Ω–µ –ø—Ä–æ–¥–∞–µ–º –ø–∏—Ü—Ü—É)
        - query: "–∞–≤—Ç–æ–º–æ–±–∏–ª–∏" ‚Üí –í–µ—Ä–Ω–µ—Ç NO RELEVANT PRODUCTS FOUND (–Ω–µ—Ç –≤ –Ω–∞—à–µ–º –∫–∞—Ç–∞–ª–æ–≥–µ)
    """
    try:
        # Limit validation
        limit = min(max(1, limit), 10)

        logger.info(
            f"Embedding search started | query='{query}' | limit={limit} | "
            f"category={'all' if not category else category}"
        )

        # Create a new database session within the current event loop context
        # This prevents the "attached to a different loop" error
        from core.utils.task_helpers import get_db_session

        async with get_db_session() as session:
            try:
                # Initialize embedding service with proper cleanup
                async with EmbeddingService() as embedding_service:
                    # Perform semantic search (get more results to account for filtering)
                    all_results = await embedding_service.search_similar_products(
                        query=query,
                        session=session,
                        limit=limit * 2,  # Get more results to filter
                        category_filter=category,
                        include_inactive=False,
                    )

                    # Handle empty database
                    if not all_results:
                        logger.warning("Embedding search: database empty")
                        return (
                            f"‚ö†Ô∏è DATABASE EMPTY\n\n"
                            f"No products/services are currently in the database.\n"
                            f"Please add products using the populate_embeddings.py script."
                        )

                    # CRITICAL: Filter out OOD results (similarity < threshold)
                    high_confidence_results = [r for r in all_results if not r["is_ood"]]
                    low_confidence_results = [r for r in all_results if r["is_ood"]]

                    # If NO high-confidence results, return OOD message
                    if not high_confidence_results:
                        best_similarity = all_results[0]["similarity"] if all_results else 0
                        threshold_pct = int(embedding_service.SIMILARITY_THRESHOLD * 100)
                        logger.warning(
                            f"No relevant products found | query='{query}' | best_similarity={best_similarity*100:.1f}% | "
                            f"threshold={threshold_pct}%"
                        )
                        return (
                            f"‚ö†Ô∏è NO RELEVANT PRODUCTS FOUND\n\n"
                            f"Your query '{query}' did not match any products/services in our catalog.\n"
                            f"The search found {len(all_results)} result(s), but the best match had only "
                            f"{best_similarity*100:.1f}% similarity (threshold: {threshold_pct}%).\n\n"
                            f"This means we likely don't offer products/services related to '{query}'.\n"
                            f"Please inform the customer politely that this specific item/service is not available.\n\n"
                            f"üí° Suggestion: Ask the customer to clarify their request or check what we actually offer."
                        )

                    # Return only high-confidence results
                    results = high_confidence_results[:limit]

                    formatted_output = f"‚úÖ Found {len(results)} relevant result(s) for query: '{query}'\n"

                    # Add info about filtered OOD results
                    if low_confidence_results:
                        formatted_output += f"(Filtered out {len(low_confidence_results)} low-confidence results)\n"

                    formatted_output += "\n"

                    for idx, result in enumerate(results, 1):
                        similarity = result["similarity"]
                        confidence_pct = int(similarity * 100)

                        formatted_output += f"[{idx}] {result['title']} (confidence: {confidence_pct}%)\n"
                        formatted_output += f"Description: {result['description']}\n"

                        if result["category"]:
                            formatted_output += f"Category: {result['category']}\n"

                        if result["price"]:
                            formatted_output += f"Price: {result['price']}\n"

                        if result["tags"]:
                            formatted_output += f"Tags: {result['tags']}\n"

                        if result["url"]:
                            formatted_output += f"URL: {result['url']}\n"

                        formatted_output += "\n"

                    # Add usage guidance
                    formatted_output += (
                        f"üí° Usage: These results are HIGH CONFIDENCE matches. "
                        f"You can safely use this information to answer the customer's question.\n"
                    )

                    avg_similarity = sum(r["similarity"] for r in results) / len(results) if results else 0
                    logger.info(
                        f"Embedding search completed | query='{query}' | results={len(results)} | "
                        f"avg_similarity={avg_similarity*100:.1f}% | ood_filtered={len(low_confidence_results)}"
                    )

                    return formatted_output

            except Exception as db_error:
                # Log the specific database error for debugging
                logger.error(f"Database error in embedding search | error={str(db_error)}", exc_info=True)
                # Return a user-friendly error message
                return (
                    f"‚ö†Ô∏è SEARCH TEMPORARILY UNAVAILABLE\n\n"
                    f"Sorry, the product search is temporarily unavailable due to high demand.\n"
                    f"Please try again in a moment or contact us directly for assistance.\n\n"
                    f"üí° Alternative: You can also browse our products on our website or send us a direct message."
                )

    except Exception as e:
        error_msg = f"‚ùå Error performing embedding search: {str(e)}"
        logger.error(f"Embedding search failed | error={str(e)}", exc_info=True)
        return error_msg


# Create the tool using @function_tool decorator
# This makes it available to OpenAI Agents SDK
embedding_search = function_tool(_embedding_search_implementation)
